generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  uid          Int     @id @default(autoincrement())
  id           String  @unique
  email        String  @unique
  hashpassword String
  isAdmin      Boolean @default(false)

  posts PostAuthor[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authors PostAuthor[]

  tags Tag[] @relation("PostTags")
}

model PostAuthor {
  postId Int
  userId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@id([postId, userId])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  posts Post[] @relation("PostTags")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  link        String
  iconLight   String   @default("")
  iconDark    String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Pic {
  id     Int      @id @default(autoincrement())
  title  String
  src    String
  button String?
  link   String?
  newTab Boolean?
}

model Friend {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  description String
  pinned      Boolean  @default(false)
  socialLinks Social[] @relation("FriendSocial")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Social {
  id        Int    @id @default(autoincrement())
  name      String
  link      String
  iconLight String
  iconDark  String

  friendId Int
  friend   Friend @relation("FriendSocial", fields: [friendId], references: [id], onDelete: Cascade)
}
